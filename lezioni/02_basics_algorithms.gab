170505

RND_GENERATORS.CC
Scaricare il programma 
http://personalpages.to.infn.it/~nanni/fisica_numerica/listing/rnd_generators.cc
metterlo nella directory include/ e fare le seguenti cose:
PRIMO FILE
- TOGLIERE IL MAIN
- Rinominare .hh
SECONDO FILE
- togliere funzioni, includere  (#include "percorso/rnd_generators.hh")

Provare a far funzionare il programma rnd_generators.cc

[DECADIMENTI]
Dall'assunzione che il numero di particelle che decadono nell' u. di tempo sia proporzionale al numero stesso di particelle:
\( P = \frac{\Delta N(t}{N(t)} = - \lambda\Delta t \)
Equazione alle differenze finite -> si fa il limite
\( N(t) =  N_0 e^{-\lambda t} =  N_0 e^{-\frac{t}{\tau}} \)
Ma se non faccio il limite, non posso risolvere analiticamente. 
PROCESSO STOCASTICO: aumentando N_0 mi avvicino alla soluzione continua?
Programma: nuclear.cc
in input: N0,dt (prob di decadimento fissata)
Requisiti del programma:
 - incrociare N/N0=1/2 a log2
 - per N0 sufficientemente grande, le curve devono sovrapporsi
 - si avvicina a exp


[RANDOM WALK]
Distanza dalla posizione iniziale = R^2
//dimostrazione sulle slides// R^2 = sqrt(N) r_{rms}
dove r_{rms} e' la root mean squared dell'ampiezza del passo

generare cammino random 2D
[!]
5 possibilita'
 - theta a caso, poi riconverto in x, y con raggio = 1
 - grid NSOE (pt cardinale scelto a caso)
 - scegliere x,y in 0,1 e normalizzare a 1 lo step
 - scegliere x, poi y=sqrt(1-x^2) //anche il segno va randomizzato!//
 - scegliere nell'intervallo (-sqrt2,+sqrt2) //corretto SOLO IN MEDIA!!//


170508
[INTEGRALI BY REJECTION]
Analogo di lanciare sassolini: conto solo quelli che cadono all'interno del laghetto e divido per il numero totale.
\( \frac{N_{hit}}{N_{hit}+N_{miss}} \)

//calcolo di pi//
genero x,y tra 0 e 1 e cerco che verifichino la condizione:
\( x^2+y^2 > R^2 \)
Qui 
\( \frac{N_{hit}}{N_{hit}+N_{miss}} = \pi/4 \)
// impiega molto tempo a convergere! //
 
[ISTOGRAMMI]
Modo efficace:
array largo numero di intervalli
++array.at(int(|offset-x|/width)) mi da' l'istogramma
dovro' poi normalizzare su N_campioni 


170508
[MONTE CARLO]
Teorema della media
\( I(a,b) = (b-a)<f> \)
quindi noto il valor medio di <f>, grazie all'hit or miss, si trova I
Converge come 1/sqrt(N) e non dipende dalla dimensionalita' dell'integrale
E' un buon metodo di integrazione se la dimensione d>3


170512
[RAPPRESENTAZIONE DEI NUMERI]
c++:
- interi short, int (max 2^32)
- virgola float(32bit), double (64bit) 
// attenzione al range: OVERFLOW //
Mantissa|Base|esponente|(E)bias
\( MB^(e-E) \)
convenzione IEEE
bit
| e |sgn|mantissa|
0   7   8        31
-8 bit per e:
  NON e <= 2^7, ma si usa bias: e <= 2^8
-23 bit per M

Numeri "sensati" fino alla n-esima cifra!
x = x* + delta
delta = \\rounding error\\
[propagazione dell'errore]
//maggiori problemi: somme tra numeri di diverso ordine, differenze ...//
R + deltaR; \\deltaR\\ \propto epsilon_n(errore medio)*sqrt(N) (random walk){a volte invece propto N}
(esempio) 1-cos(x) per x<10^-3 e' quasi zero, ha un numero di cifre significative molto piu' basso; scrivo invece sin^2/(1+cos^2) non perdo cifre significative!
(esempio) ax^2+bx+c=0 ha soluzione con differenza e da' problemi. Allora q=-1/2(b+sgn(b)sqrt(b^2-4ac) ) non ha piu' differenze; x1 = q/a x2=c/q x1x2=c/a
[Machine accuracy]
il piu' piccolo per cui
1 + \epsilon_n \neq 1
//non si usano numeri reali nei loop!!//
//non si confrontano (==) due numeri reali, ma si fa la loro differenza minore di una accuratezza che scelgo!!//
Registry di memoria (es dove faccio le operazioni di controllo del while; in generale dove non assegno il risultato a una variabile) hanno precisione molto piu' alta!

[Output di numeri]
#include <iomanip>
setiosflags(ios::scientific)
setw(30)
setprecision(20)
fegetexpect, feenableexcept // vale solo sul primo numero successivo //
scrivere 1., 2., ... quando si divide

[O] manca parte perche' sono andato via prima

170515
[funzioni di Bessel ricorsive]
J_a(x) = sum^inf (-1)^n/n!Gamma(m+a+1) * (x/2)^(2m+a)
2a/x * Z_a(x) = Z_{a-1}(x) + Z_{a+1}(x)


http://www.ams.org/journals/mcom/1959-13-066/S0025-5718-1959-0105794-5/S0025-5718-1959-0105794-5.pdf p.103





























